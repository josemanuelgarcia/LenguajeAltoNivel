

void setup() { 

    Serial.begin(9600);
    servoI.attach(4);
    servoD.attach(5);
    servoP.attach(6);
    servoPMove.attach(7);
            
    pinMode(1 , INPUT);    
    pinMode(2 , INPUT);
    pinMode(3 , INPUT);
    
    //Ultrasonidos
    for(int i=0; i<3;i++){
          pinMode(pinesTrig[i] , OUTPUT);
          pinMode(pinesEcho[i], INPUT);
    }
}

void girar(String lado, int grados) {
    if(lado=="derecha")
        rotarDerecha(grados);
    else
        rotarIzquierda(grados);
}

void mover_hacia(String direccion, int cents) {
    if(direccion=="delante")
        avanzar(cents);
   else
        retroceder(cents);
}

void rotarDerecha(int grados) {
  servoD.write(0);
  servoI.write(0);
  delay(7.86*grados);//AJUSTAR AL ROBOT
  servoD.write(90);
  servoI.write(90);
}

void rotarIzquierda(int grados) {
  servoD.write(180);
  servoI.write(180);
  delay(7.9*grados);//AJUSTAR AL ROBOT
  servoD.write(90);
  servoI.write(90);
}

void avanzar(int centimetros) {
  servoD.write(110); // alante
  servoI.write(70); // alante
}

void retroceder(int centimetros) {
  servoD.write(0); // atras
  servoI.write(180); // atras
}

void parar_todo() {
  servoD.write(90);
  servoI.write(90);
}

void actualizarTodosLosSensores(){ 
  for(int i=0; i < 3; i++){
    sensor[i] =  digitalRead(pinesSensores[i]);
  }
  
  // 4 lecturas adicionales
  // Se guardan las lineas
  for(int i=0; i < 4; i++){
    delay(15);
    
     for(int i=0; i < 3; i++){
       if (digitalRead(pinesSensores[i]) == LINEA )
          sensor[i] = LINEA;
     }
  }
}

bool hay_linea(int id_sensor) {
    actualizarTodosLosSensores();
    return sensor[id_sensor-1] == LINEA ;
}

void abrir_pinza(){
    while ( gradosPinza < GMAX){
            gradosPinza = gradosPinza+1;
            servoP.write(gradosPinza);
        }
}

void cerrar_pinza(){
    while ( gradosPinza > GMIN){
        gradosPinza = gradosPinza-1;
        servoP.write(gradosPinza);
    }
}

void mover_pinza(int coordenada) {
    if ( coordenada < 0 || coordenada > 24 )
    return;

  int movimiento = coordenada - posicionY;
  int tiempoY = tiempoPaso  * coordenada;

  if (movimiento < 0) {
    servoPMove.write(0);
    delay(-tiempoY);
    servoPMove.write(90);
  } else {
    servoPMove.write(180);
    delay(tiempoY);
    servoPMove.write(90);
  } 

  posicionY = coordenada;
}

bool hay_obstaculo(int distancia_param, int id_sensor) {
  digitalWrite(pinesTrig[id_sensor-1], LOW); /* Por seguridad volvemos a poner el Trig a LOW*/
  delayMicroseconds(5);
  digitalWrite(pinesTrig[id_sensor-1], HIGH); /* Emitimos el pulso ultrasÃ³nico */
  delayMicroseconds(10);
  long tiempoRespuesta = pulseIn(pinesEcho[id_sensor-1], HIGH); /* Medimos la longitud del
   pulso entrante Cuanto tiempo tarda la entrada en pasar de HIGH a LOW
   retorna microsegundos */
  long distancia = int(0.017 * tiempoRespuesta);
  return distancia_param<distancia;
}



