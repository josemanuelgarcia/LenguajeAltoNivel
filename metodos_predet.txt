
void rotarDerecha(int grados) {
  servoD.write(0);
  servoI.write(0);
  delay(5.56*grados);//AJUSTAR AL ROBOT
  servoD.write(90);
  servoI.write(90);
}

void rotarIzquierda(int grados) {
  servoD.write(180);
  servoI.write(180);
  delay(5.56*grados);//AJUSTAR AL ROBOT
  servoD.write(90);
  servoI.write(90);
}

void avanzar(int centimetros) {

  int time = millis();

  servoD.write(180); // alante
  servoI.write(0); // alante
  delay(65*centimetros);
  // este se va un poco a la izquierda, lo giro un poco a la derecha
  servoD.write(180);
  servoI.write(180);
  delay(25); // AJUSTAR A CADA ROBOT
  servoD.write(90);
  servoI.write(90);
  return true;
}

void retroceder(int centimetros) {
  servoD.write(0); // atras
  servoI.write(180); // atras
  delay(65* centimetros);

  // este se va un poco a la derecha, lo giro un poco a la izquierda
  servoD.write(0);
  servoI.write(0);
  delay(25); // AJUSTAR A CADA ROBOT

  servoD.write(90);
  servoI.write(90);
}

void parar_todo(int centimetros) {
  servoD.write(90);
  servoI.write(90);
}

bool hay_Obstaculo(int distancia_param, int id_sensor) {
  //GUARDAR EN UN ARRAY LOS TRIG Y EN OTRO LOS ECHO CADA UNO CON EL ID DEL SENSOR
    
  digitalWrite(id_sensor, LOW); /* Por seguridad volvemos a poner el Trig
   a LOW*/
  delayMicroseconds(5);

  digitalWrite(id_sensor, HIGH); /* Emitimos el pulso ultras√≥nico */
  delayMicroseconds(10);

  tiempoRespuesta = pulseIn(id_sensor, HIGH); /* Medimos la longitud del
   pulso entrante Cuanto tiempo tarda la entrada en pasar de HIGH a LOW
   retorna microsegundos */

  distancia = int(0.017 * tiempoRespuesta);
  return distancia_param<distancia
}





